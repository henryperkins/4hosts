version: '3.9'

# ============================================================================
# FOUR HOSTS RESEARCH APPLICATION - DOCKER COMPOSE CONFIGURATION
# ============================================================================
# This stack runs the complete Four Hosts research system with:
# - PostgreSQL database for persistent data storage
# - Redis cache for session management and performance optimization
# - FastAPI backend with paradigm-aware research capabilities
# - React frontend for user interaction
# ============================================================================

services:
  # ==========================================================================
  # DATABASE SERVICE - PostgreSQL
  # ==========================================================================
  # Primary data store for user accounts, research history, and system data
  postgres:
    # Using 15-alpine to match existing data directory initialized under PG 15.
    # Upgrade path: run 15 -> dump or pg_upgrade to 16, then retag.
    image: postgres:15-alpine
    # container_name removed to avoid conflicts when running multiple stacks.
    # Docker Compose will auto-name the container (project_service_index) and
    # service DNS remains 'postgres' for inter-service communication.
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: fourhosts
    ports:
      - "5433:5432"  # Expose PostgreSQL on port 5433 to avoid conflicts
    volumes:
      # Persistent volume for database data (survives container restarts)
      - postgres_data:/var/lib/postgresql/data
      # Initialize database schema on first run (read-only mount)
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d fourhosts"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s  # Give database time to initialize
    restart: unless-stopped
    networks:
      - fourhosts-network
    labels:
      com.fourhosts.service: "database"
      com.fourhosts.description: "PostgreSQL database for user data and research history"

  # ==========================================================================
  # CACHE SERVICE - Redis
  # ==========================================================================
  # High-performance cache for sessions, rate limiting, and temporary data
  redis:
    image: redis:7-alpine
    # container_name removed to prevent collision with backend-only compose file.
    # Port mapping removed: services communicate over internal network at redis:6379.
    # Exposing Redis to host is unnecessary for normal app operation and caused
    # a port allocation conflict when 6380 was already in use. If external
    # access is required for debugging, re-add a mapping like '6381:6379'.
    volumes:
      # Persistent volume for Redis data (optional persistence)
      - redis_data:/data
    command: redis-server --appendonly yes  # Enable persistence
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    networks:
      - fourhosts-network
    labels:
      com.fourhosts.service: "cache"
      com.fourhosts.description: "Redis cache for sessions and performance optimization"

  # ==========================================================================
  # BACKEND SERVICE - FastAPI Application
  # ==========================================================================
  # Core research engine with paradigm classification and AI-powered answers
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fourhosts-backend
    environment:
      # Database connection (uses internal Docker network hostname)
      DATABASE_URL: postgresql+asyncpg://user:password@postgres:5432/fourhosts

      # Environment mode - development enables debug features and relaxed CORS
      ENVIRONMENT: development

      # Cache connection (application gracefully handles Redis unavailability)
      REDIS_URL: redis://redis:6379
      # JWT signing key (development default; override via .env in real use)
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-insecure-dev-token-change-me}

    # NOTE: API keys for external services should be set via .env file or secrets
    # Required keys: AZURE_OPENAI_API_KEY, GOOGLE_API_KEY, BRAVE_API_KEY, etc.
    depends_on:
      # Wait for healthy services before starting
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Allow host port override via BACKEND_PORT env (defaults to 8001)
    ports:
      # Bind to 8001 by default to avoid conflicts with Portainer/local dev
      - "${BACKEND_PORT:-8001}:8000"  # host:container
    restart: unless-stopped
    networks:
      - fourhosts-network
    labels:
      com.fourhosts.service: "backend"
      com.fourhosts.description: "FastAPI backend with paradigm research engine"
      com.fourhosts.endpoints: "http://localhost:8000/docs"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================================================
  # FRONTEND SERVICE - React Application
  # ==========================================================================
  # User interface for paradigm-aware research queries
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fourhosts-frontend
    depends_on:
      backend:
        condition: service_started  # Frontend can start once backend is running
    ports:
      - "5173:80"  # Nginx serves React app on port 80, exposed as 5173 locally
    restart: unless-stopped
    networks:
      - fourhosts-network
    labels:
      com.fourhosts.service: "frontend"
      com.fourhosts.description: "React frontend for Four Hosts research interface"
      com.fourhosts.url: "http://localhost:5173"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

# ==========================================================================
# VOLUMES - Persistent Data Storage
# ==========================================================================
volumes:
  postgres_data:
  # Using minimal configuration to maintain compatibility with existing volumes
  # If you need to start fresh: docker-compose down -v

  redis_data:
# Using minimal configuration to maintain compatibility with existing volumes

# ==========================================================================
# NETWORKS - Internal Service Communication
# ==========================================================================
networks:
  fourhosts-network:
    name: fourhosts-network
    driver: bridge
    labels:
      com.fourhosts.network: "main"
      com.fourhosts.description: "Internal network for service communication"

# ==========================================================================
# USAGE INSTRUCTIONS
# ==========================================================================
# 1. Start all services:        docker-compose up -d
# 2. View logs:                 docker-compose logs -f [service-name]
# 3. Stop all services:         docker-compose down
# 4. Reset data (careful!):     docker-compose down -v
# 5. Rebuild after code changes: docker-compose up -d --build
#
# ACCESS POINTS:
# - Frontend:      http://localhost:5173
# - Backend API:   http://localhost:8001 (default, avoids Portainer on 8000)
# - API Docs:      http://localhost:8001/docs
# - PostgreSQL:    localhost:5433 (user/password/fourhosts)
# - Redis:         localhost:6380
#
# MONITORING:
# - Check service health:  docker-compose ps
# - View resource usage:   docker stats
# - Inspect logs:          docker-compose logs [postgres|redis|backend|frontend]
# ==========================================================================
