name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # --- Testing & Quality Checks ---
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: fourhosts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd four-hosts-app/backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        cd four-hosts-app/backend
        ruff check .
        black --check .
        mypy .
    
    - name: Run security checks
      run: |
        cd four-hosts-app/backend
        bandit -r . -ll
        safety check
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/fourhosts_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key
      run: |
        cd four-hosts-app/backend
        pytest -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./four-hosts-app/backend/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: four-hosts-app/frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd four-hosts-app/frontend
        npm ci
    
    - name: Run linting
      run: |
        cd four-hosts-app/frontend
        npm run lint
    
    - name: Run type checking
      run: |
        cd four-hosts-app/frontend
        npm run type-check
    
    - name: Run tests
      run: |
        cd four-hosts-app/frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd four-hosts-app/frontend
        npm run build
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./four-hosts-app/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # --- Security Scanning ---
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # --- Build & Push Docker Images ---
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./four-hosts-app/backend
        file: ./four-hosts-app/backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./four-hosts-app/frontend
        file: ./four-hosts-app/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # --- Deploy to Staging ---
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes (Staging)
      env:
        KUBE_CONFIG: ${{ secrets.STAGING_KUBE_CONFIG }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        cd deployment/k8s/staging
        kustomize edit set image backend=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}-backend
        kustomize edit set image frontend=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }}-frontend
        
        # Apply manifests
        kubectl apply -k .
        
        # Wait for rollout
        kubectl rollout status deployment/four-hosts-backend -n staging
        kubectl rollout status deployment/four-hosts-frontend -n staging
    
    - name: Run smoke tests
      run: |
        cd tests/smoke
        npm install
        STAGING_URL=${{ secrets.STAGING_URL }} npm test

  # --- Deploy to Production ---
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Kubernetes (Production)
      env:
        KUBE_CONFIG: ${{ secrets.PROD_KUBE_CONFIG }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Update image tags in manifests
        cd deployment/k8s/production
        kustomize edit set image backend=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-backend
        kustomize edit set image frontend=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-frontend
        
        # Apply manifests with canary deployment
        kubectl apply -k .
        
        # Wait for canary rollout
        kubectl rollout status deployment/four-hosts-backend-canary -n production
        kubectl rollout status deployment/four-hosts-frontend-canary -n production
        
        # Run canary tests
        cd ../../../tests/canary
        npm install
        PROD_URL=${{ secrets.PROD_URL }} npm test
        
        # If tests pass, promote canary to production
        kubectl patch service four-hosts-backend -n production -p '{"spec":{"selector":{"version":"${{ github.event.release.tag_name }}"}}}'
        kubectl patch service four-hosts-frontend -n production -p '{"spec":{"selector":{"version":"${{ github.event.release.tag_name }}"}}}'
        
        # Scale down old version
        kubectl scale deployment four-hosts-backend-stable -n production --replicas=0
        kubectl scale deployment four-hosts-frontend-stable -n production --replicas=0
    
    - name: Create release notes
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.release.tag_name }}
        release_name: Release ${{ github.event.release.tag_name }}
        body: |
          ## Changes in this Release
          ${{ github.event.release.body }}
          
          ## Docker Images
          - Backend: `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-backend`
          - Frontend: `${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}-frontend`
    
    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment of version ${{ github.event.release.tag_name }} completed!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # --- Performance Testing ---
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run k6 performance tests
      uses: k6io/action@v0.1
      with:
        filename: tests/performance/load-test.js
      env:
        K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}
        BASE_URL: ${{ secrets.STAGING_URL }}
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: results/

  # --- Documentation ---
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate API documentation
      run: |
        cd four-hosts-app/backend
        pip install -r requirements.txt
        python generate_openapi.py > ../../docs/api/openapi.json
    
    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs